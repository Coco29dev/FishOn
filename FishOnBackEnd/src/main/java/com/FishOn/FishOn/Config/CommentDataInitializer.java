package com.FishOn.FishOn.Config;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.FishOn.FishOn.Model.CommentModel;
import com.FishOn.FishOn.Model.PostModel;
import com.FishOn.FishOn.Model.UserModel;
import com.FishOn.FishOn.Repository.CommentRepository;

@Component
public class CommentDataInitializer {

    @Autowired
    private CommentRepository commentRepository;

    public List<CommentModel> createComments(List<PostModel> posts, List<UserModel> users) {
        List<CommentModel> comments = new ArrayList<>();

        // ==== CRÃ‰ATION TEMPLATES ====
        String[] commentsTemplates = {
                "Magnifique prise ! FÃ©licitations !",                 // 0
                "Quel combat Ã§a a dÃ» Ãªtre !",                         // 1
                "Superbe technique, bravo !",                         // 2
                "Tu peux partager ton spot ? ðŸ˜‰",                     // 3
                "Respect pour cette belle prise !",                   // 4
                "Ã‡a donne envie d'y retourner !",                     // 5
                "Belle session de pÃªche !",                           // 6
                "Impressionnant ce spÃ©cimen !",                       // 7
                "Tu as utilisÃ© quel appÃ¢t ?",                         // 8
                "Quelle taille exactement ?",                         // 9
                "Le rÃªve de tout pÃªcheur !",                          // 10
                "Chapeau pour cette rÃ©ussite !",                      // 11
                "Elle a bien luttÃ© dis donc !",                       // 12
                "Parfait pour un barbecue !",                         // 13
                "Tu l'as remise Ã  l'eau ?",                           // 14
                "Technique au top !",                                 // 15
                "Quelle patience il faut avoir !",                    // 16
                "Le poisson du siÃ¨cle !",                             // 17
                "Bravo pour cette persÃ©vÃ©rance !",                    // 18
                "Ã‡a c'est de la pÃªche !",                             // 19
                "Tu me donnes tes conseils ?",                        // 20
                "Incroyable cette prise !",                           // 21
                "Le spot de rÃªve !",                                  // 22
                "Tu as eu de la chance !",                            // 23
                "Superbe photo en plus !",                            // 24
                "Quel matÃ©riel tu utilises ?",                        // 25
                "Elle est magnifique !",                              // 26
                "PremiÃ¨re fois que j'en vois une si grosse !",        // 27
                "Tu m'emmÃ¨nes la prochaine fois ?",                   // 28
                "LÃ©gende vivante de la pÃªche !"                       // 29
        };

        // ==== CRÃ‰ATION COMMENTAIRES ====
        // Boucle principale : parcours des 30 publications
        Integer i = 0; // Index du post (0 Ã  29)

        for (PostModel post : posts) { // Pour chaque publication

            // CrÃ©ation de 2 commentaires par publication
            for (Integer j = 0; j < 2; j++) { // j = 0 (1er commentaire), j = 1 (2Ã¨me commentaire)

                // ---- CALCUL DU USER PROPRIÃ‰TAIRE ----
                // Formule : index_post Ã· 3 = index_user_propriÃ©taire
                // Post 0,1,2 â†’ User 0 | Post 3,4,5 â†’ User 1 | etc.
                Integer ownerIndex = i / 3;

                // ---- CALCUL DU USER COMMENTATEUR ----
                // Formule de base pour gÃ©nÃ©rer de la variÃ©tÃ©
                Integer commenterIndex = (i + j + 1) % 10;

                // ---- VÃ‰RIFICATION ANTI-CONFLIT ----
                // Un utilisateur ne doit jamais commenter ses propres posts
                if (commenterIndex == ownerIndex) {
                    commenterIndex = (commenterIndex + 1) % 10; // DÃ©calage sÃ©curisÃ©
                }

                // ---- RÃ‰CUPÃ‰RATION DU TEMPLATE DE COMMENTAIRE ----
                // Formule pour distribuer les 30 templates sur 60 commentaires
                Integer templateIndex = (i * 2 + j) % 30;
                String commentContent = commentsTemplates[templateIndex];

                // ---- CRÃ‰ATION ET CONFIGURATION DU COMMENTAIRE ----
                // CrÃ©ation avec le contenu du template
                CommentModel comment = new CommentModel(commentContent);

                // Association avec l'utilisateur commentateur
                UserModel commenter = users.get(commenterIndex);
                comment.setUser(commenter);

                // Association avec la publication commentÃ©e
                comment.setPost(post);

                // ---- PERSISTANCE ET AJOUT Ã€ LA COLLECTION ----
                // Sauvegarde en base de donnÃ©es via JPA
                CommentModel savedComment = commentRepository.save(comment);

                // Ajout Ã  la liste de retour pour l'orchestrateur
                comments.add(savedComment);
            }
            i++;
        }
        return comments;
    }
}